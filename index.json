[{"content":"Introduction At my homelab I deploy and destroy OpenShift clusters several times a day. One of the most annoying things for me is accessing OpenShift console when it doesn\u0026rsquo;t have proper certificates installed: browser warns about self-signed certificates and makes me do several clicks first in order to access the UI. And of course, in real-life deployments you have to use proper certificates to secure routes and API endpoints.\nThese days it\u0026rsquo;s easy to obtain free TLS certificates using Let\u0026rsquo;s Encrypt or similar services. In March 2018 Let\u0026rsquo;s Encrypt added support for wildcard certificates, that made it finally possible to use it for my OpenShift deployments. I use acme.sh together with DNS API for DNS chanllenge.\nSolution Usually I have 2 different versions of clusters running at the same time: stable and development. So I need to request a wildcard certificate for my main domain plus for api and *.apps subdomains for both clusters:\n$ export DOMAIN=my_domain.fqdn $ acme.sh --issue --dns dns_dreamhost \\  -d \u0026#39;$DOMAIN\u0026#39; \\  -d \u0026#39;*.$DOMAIN\u0026#39; \\  -d \u0026#39;api.stable.$DOMAIN\u0026#39; \\  -d \u0026#39;api.devel.$DOMAIN\u0026#39; \\  -d \u0026#39;*.apps.stable.$DOMAIN\u0026#39; \\  -d \u0026#39;*.apps.devel.$DOMAIN\u0026#39; Installing the certificate Once you sucessfully receive the certificate, it\u0026rsquo;s time to install it. There are 2 places where we need to introduce new certificates: ingress controller and API server.\nIngress controller Create a secret that contains full certificate chain and private key in the openshift-ingress namespace:\n$ oc create secret tls letsencrypt-certs -n openshift-ingress \\  --cert=${HOME}/.acme.sh/${DOMAIN}/fullchain.cer \\  --key=${HOME}/.acme.sh/${DOMAIN}/${DOMAIN}.key \\  --dry-run=client -o yaml | oc apply -f - Then update the ingress controller to use the created secret:\n$ oc patch ingresscontroller default -n openshift-ingress-operator \\  --type=merge --patch=\u0026#39;{\u0026#34;spec\u0026#34;: { \u0026#34;defaultCertificate\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;letsencrypt-certs\u0026#34; }}}\u0026#39; API server Same for the API server: Create a secret that contains full certificate chain and private key in the openshift-config namespace:\n$ oc create secret tls letsencrypt-certs -n openshift-config \\  --cert=${HOME}/.acme.sh/${DOMAIN}/fullchain.cer \\  --key=${HOME}/.acme.sh/${DOMAIN}/${DOMAIN}.key \\  --dry-run=client -o yaml | oc apply -f - And update the API server with the new secret reference:\n$ export CLUSTER=stable $ oc patch apiserver cluster --type=merge \\  -p \u0026#39;{\u0026#34;spec\u0026#34;:{\u0026#34;servingCerts\u0026#34;: {\u0026#34;namedCertificates\u0026#34;: [{\u0026#34;names\u0026#34;: [\u0026#34;api.\u0026#39;${CLUSTER}\u0026#39;.\u0026#39;${DOMAIN}\u0026#34;], \u0026#34;servingCertificate\u0026#34;: {\u0026#34;name\u0026#34;: \u0026#34;letsencrypt-certs\u0026#34;}}]}}}\u0026#39; It will take some time to rebuild the containers and deploy the pods, but once it\u0026rsquo;s done you would be able to connect to the cluster console without any warnings.\nFixing oc client You might encounter one issue with the CLI tools if they use an old KUBECONFIG. If it references old CA data, you won\u0026rsquo;t be able to connect to the cluster:\n$ oc whoami Unable to connect to the server: x509: certificate signed by unknown authority The solution is to remove the old CA data from your KUBECONFIG:\n$ sed -i -e \u0026quot;s/\\(certificate-authority-data:\\).*//\u0026quot; $KUBECONFIG And after that connection succeeds:\n$ oc whoami system:admin References:  https://docs.openshift.com/container-platform/4.8/security/certificates/replacing-default-ingress-certificate.html https://docs.openshift.com/container-platform/4.8/security/certificates/api-server.html  ","permalink":"https://vashirov.blog/2021/10/04/installing-lets-encrypt-certificates-in-openshift/","summary":"Introduction At my homelab I deploy and destroy OpenShift clusters several times a day. One of the most annoying things for me is accessing OpenShift console when it doesn\u0026rsquo;t have proper certificates installed: browser warns about self-signed certificates and makes me do several clicks first in order to access the UI. And of course, in real-life deployments you have to use proper certificates to secure routes and API endpoints.\nThese days it\u0026rsquo;s easy to obtain free TLS certificates using Let\u0026rsquo;s Encrypt or similar services.","title":"Installing Letâ€™s Encrypt certificates in OpenShift"},{"content":"I was pleasantly surprised to find out that oc (and kubectl too) has a built-in capability to generate shell auto completion.\nFor Zsh add the following snippet to your ~/.zshrc:\nif [ $commands[oc] ]; then source \u0026lt;(oc completion zsh) fi For Bash add this to ~/.bashrc:\nif command -v oc \u0026amp;\u0026gt;/dev/null; then source \u0026lt;(oc completion bash) fi After opening a new shell:\n$ oc \u0026lt;TAB\u0026gt; adm describe logout replace annotate diff logs rollback api-resources edit new-app rollout api-versions ex new-build rsh apply exec new-project rsync attach explain observe run auth expose options scale autoscale extract patch secrets cancel-build get plugin serviceaccounts cluster-info help policy set completion idle port-forward start-build config image process status cp import-image project tag create kustomize projects version debug label proxy wait delete login registry whoami ","permalink":"https://vashirov.blog/2021/04/10/how-to-enable-shell-auto-completion-for-openshift-oc-command/","summary":"I was pleasantly surprised to find out that oc (and kubectl too) has a built-in capability to generate shell auto completion.\nFor Zsh add the following snippet to your ~/.zshrc:\nif [ $commands[oc] ]; then source \u0026lt;(oc completion zsh) fi For Bash add this to ~/.bashrc:\nif command -v oc \u0026amp;\u0026gt;/dev/null; then source \u0026lt;(oc completion bash) fi After opening a new shell:\n$ oc \u0026lt;TAB\u0026gt; adm describe logout replace annotate diff logs rollback api-resources edit new-app rollout api-versions ex new-build rsh apply exec new-project rsync attach explain observe run auth expose options scale autoscale extract patch secrets cancel-build get plugin serviceaccounts cluster-info help policy set completion idle port-forward start-build config image process status cp import-image project tag create kustomize projects version debug label proxy wait delete login registry whoami ","title":"How to enable shell auto completion for OpenShift `oc` command"},{"content":"ðŸ‘‹ ","permalink":"https://vashirov.blog/1970/01/01/hello-world/","summary":"ðŸ‘‹ ","title":"Hello World!"}]